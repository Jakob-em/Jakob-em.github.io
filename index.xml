<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jakob Emmerling</title><link>https://jakobemmerling.de/</link><description>Recent content on Jakob Emmerling</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 15 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://jakobemmerling.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Generating 3d models with cadquery and streamlit</title><link>https://jakobemmerling.de/posts/streamlit-cadquery/</link><pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate><guid>https://jakobemmerling.de/posts/streamlit-cadquery/</guid><description>I have been toying around with generating customizable 3d models for 3d printing for a while now. I wrote code to generate cookie cutters, name clips for charging cables and a few other things. Recently I had the idea to use streamlit to create a UI for the creation of those customizable models.
In this post I will use a simple example to showcase how this can be done. The example will be a simple badge with a customizable text embossed on it.</description></item><item><title>Angular anti-patterns #01: Subscribing to every observable</title><link>https://jakobemmerling.de/posts/angular-anti-patterns-01/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://jakobemmerling.de/posts/angular-anti-patterns-01/</guid><description>Rxjs is probably the most difficult thing to grasp when starting out with angular. For that reason often times the benefits of rxjs are not used and code like the following is written.
@Component({ selector: &amp;#39;app-subscribing-to-everything-bad&amp;#39;, standalone: true, imports: [CommonModule], template: ` &amp;lt;h3&amp;gt;Bad&amp;lt;/h3&amp;gt; &amp;lt;p&amp;gt;{{result}}&amp;lt;/p&amp;gt; ` }) export class SubscribingToEverythingBadComponent { result: string | undefined; constructor(someService: SomeServiceService) { someService.loadSomething().subscribe((result) =&amp;gt; { this.result = result; }); } } The first thing that comes to ones mind when seeing observables would be to subscribe to get the value out of there.</description></item><item><title>Hello World</title><link>https://jakobemmerling.de/posts/hello-world/</link><pubDate>Fri, 04 Nov 2022 10:33:08 +0100</pubDate><guid>https://jakobemmerling.de/posts/hello-world/</guid><description>Looks like this blog setup is working. Next up üìù</description></item></channel></rss>